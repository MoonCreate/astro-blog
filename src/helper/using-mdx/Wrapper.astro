<script>
    import { animate, spring, type AnimationControls, } from "motion";

    const wrapper = document.querySelector(".wrapper") as HTMLDivElement;
    const buttonDirection = document.querySelector(".change-direction") as HTMLButtonElement;
    const buttonJustify = document.querySelector(".change-justify") as HTMLButtonElement;
    const buttonAlign = document.querySelector(".change-align") as HTMLButtonElement;
    const buttonAdd = document.querySelector(".add-child") as HTMLButtonElement;

    const animationControls = [] as {
        target: HTMLElement;
        control: AnimationControls;
    }[];

    function sanitize(rect: DOMRect) {
        return {
            width: rect.width,
            height: rect.height,
            x: rect.x + scrollX,
            y: rect.y + scrollY,
        } as DOMRect;
    }

    function bindBoundingClientRect(anim = true) {
        while(animationControls.length) {
            const { control, target } = animationControls.pop()!;
            if (!control.finished) {
                control.pause();
                const rect = sanitize(target.getBoundingClientRect());
                target.setAttribute("data-current", JSON.stringify(rect));
            }
            control.finish();
        }

        for (const content of document.querySelectorAll(".content") as NodeListOf<HTMLDivElement>) {
            const rect = sanitize(content.getBoundingClientRect());
            const current = content.getAttribute("data-current") ?? "";

            content.setAttribute("data-before", current);
            content.setAttribute("data-current", JSON.stringify(rect));

            if (!anim) continue;
            const beforeRect: DOMRect = !current ? {...rect, width: 0, height: 0} : JSON.parse(current);
            const animation = animate(content, {
                x: [beforeRect.x - rect.x, 0],
                y: [beforeRect.y - rect.y, 0],
                scaleX: [beforeRect.width / rect.width, 1, 1],
                scaleY: [beforeRect.height / rect.height, 1, 1],
                transformOrigin: "top left",
            }, {
                easing: spring({
                    damping: 100,
                }),
            });

            animationControls.push({ target: content, control: animation });
        }
    }

    const dirs = ["column", "row-reverse", "column-reverse", "row"];
    const justify = ["flex-end", "center", "space-between", "space-around", "space-evenly", "flex-start"];
    const align = ["flex-end", "center", "baseline", "stretch", "flex-start"];
    const colors = ["--color-pink", "--color-sky", "--color-teal", "--color-sapphire", "--color-rosewater", "--color-flamingo", "--color-peach", "--color-yellow", "--color-green"];

    buttonDirection.addEventListener("click", () => {
        const dir = dirs.shift()!;
        wrapper.style.flexDirection = dir;
        buttonDirection.innerText = dir;
        bindBoundingClientRect();
        dirs.push(dir);
    });

    buttonJustify.addEventListener("click", () => {
        const jus = justify.shift()!;
        wrapper.style.justifyContent = jus;
        buttonJustify.innerText = jus;
        bindBoundingClientRect();
        justify.push(jus);
    });

    buttonAlign.addEventListener("click", () => {
        const ali = align.shift()!;
        wrapper.style.alignItems = ali;
        buttonAlign.innerText = ali;
        bindBoundingClientRect();
        align.push(ali);
    });

    buttonAdd.addEventListener("click", () => {
        const color = colors.shift()!;
        const div = document.createElement("div");
        div.classList.add("content");
        div.style.backgroundColor = `hsl(var(${color}))`;
        wrapper.appendChild(div);
        bindBoundingClientRect();
        colors.push(color);
    });

    buttonAdd.dispatchEvent(new Event("click"));
    buttonAdd.dispatchEvent(new Event("click"));
    buttonAdd.dispatchEvent(new Event("click"));
    buttonAdd.dispatchEvent(new Event("click"));

    window.addEventListener("resize", () => bindBoundingClientRect(false));
</script>

<div class="container">
    <div class="demo">
        <div class="wrapper">
            <!-- <div class="content" style="--color-content: var(--color-pink)"></div> -->
        </div>
        <div class="controls">
            <span>Direction</span>
            <span>Justify</span>
            <span>Align</span>
            <button class="change-direction">row</button>
            <button class="change-justify">flex-start</button>
            <button class="change-align">flex-start</button>
            <button class="add-child" style="grid-column: 1/ -1; margin-top: 1rem; min-width: 200px; justify-self: center">Add</button>
        </div>
    </div>
</div>

<style>
    .container {
        .demo {
            padding: var(--viewport-spacing);
            background-color: hsl(var(--color-crust));
            border: 2px dashed hsl(var(--color-overlay0));
            border-radius: 6px;
            display: flex;
            flex-direction: column;
            gap: 1rem;

            .wrapper {
                display: flex;
                justify-content: flex-start;
                align-items: flex-start;
                height: 400px;
                background-color: hsl(var(--color-base));
                border: 2px dashed hsl(var(--color-overlay0));
                flex-wrap: wrap;
                .content {
                    background-color: hsl(var(--color-content));
                    will-change: transform;
                    border-radius: 3px;
                    min-width: 100px;
                    min-height: 100px;
                    flex-shrink: 1;

                    @container (max-width: 430px) {
                        min-width: 50px;
                        min-height: 50px;
                    }
                }
            }
            .controls {
                display: grid;
                column-gap: .5rem;
                grid-template-columns: 1fr 1fr 1fr;
                grid-template-rows: min-content min-content;

                button {
                    border-radius: 6px;
                    padding: 12px;
                    outline: none;
                    background-color: hsl(var(--color-green));
                    border: none;
                    cursor: pointer;
                }
            }
        }
    }
</style>
